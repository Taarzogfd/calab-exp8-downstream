From 84ac9de87a60686327bec7803ec9bd7d416b1603 Mon Sep 17 00:00:00 2001
From: jason <jason14591@outlook.com>
Date: Thu, 15 Sep 2022 14:30:54 +0800
Subject: [PATCH] All changes between exp7 and exp8

---
 myCPU/mycpu_AM.v  |  8 ++++-
 myCPU/mycpu_EX.v  | 10 ++++--
 myCPU/mycpu_ID.v  | 89 ++++++++++++++++++++++++++++++++++++++---------
 myCPU/mycpu_IF.v  |  7 ++--
 myCPU/mycpu_WB.v  | 13 ++++---
 myCPU/mycpu_top.v | 20 ++++++++---
 6 files changed, 116 insertions(+), 31 deletions(-)

diff --git a/myCPU/mycpu_AM.v b/myCPU/mycpu_AM.v
index f9836d0..7cff9cf 100644
--- a/myCPU/mycpu_AM.v
+++ b/myCPU/mycpu_AM.v
@@ -10,14 +10,18 @@ module stage_4_AM (
 
     input wire [38:0]  stage_3_to_4,
     input wire [31:0] alu_result,
+    output wire [4:0] rf_waddr_4_fwd,
     input wire [31:0] data_sram_rdata,
     output wire [69:0] stage_4_to_5
 );
 
+wire readygo_4;
+assign readygo_4=1'b1;
+
 wire [31:0] pc;
 
 always @(posedge clk ) begin
-    if (reset) valid_4<=1'b1;
+    if (reset) valid_4<=1'b0;
     else valid_4<=valid_3;
 end
 
@@ -49,6 +53,8 @@ end
 assign mem_result   = data_sram_rdata;
 assign final_result = res_from_mem ? mem_result : alu_result_reg;
 
+assign rf_waddr_4_fwd=dest&{5{rf_we}};
+
 assign {rf_we,dest,res_from_mem,pc}=upstream_input;
 assign stage_4_to_5={rf_we,dest,final_result,pc};
 
diff --git a/myCPU/mycpu_EX.v b/myCPU/mycpu_EX.v
index 168ec34..067ef33 100644
--- a/myCPU/mycpu_EX.v
+++ b/myCPU/mycpu_EX.v
@@ -9,7 +9,8 @@ module stage_3_EX (
     input  wire allow_4,
 
     input  wire [116:0] stage_2_to_3,
-    input  wire [31:0]  memory_write_data,
+    input  wire [31:0] memory_write_data,
+    output wire [ 4:0] rf_waddr_3_fwd,
     output wire [31:0] alu_result,
     output wire [31:0] data_sram_wdata,
     output wire [ 3:0] data_sram_we,
@@ -18,8 +19,11 @@ module stage_3_EX (
     output wire [38:0] stage_3_to_4
 );
 
+wire readygo_3;
+assign readygo_3=1'b1;
+
 always @(posedge clk ) begin
-    if (reset) valid_3<=1'b1;
+    if (reset) valid_3<=1'b0;
     else valid_3<=valid_2;
 end
 
@@ -60,6 +64,8 @@ alu u_alu(
     .alu_result (alu_result)
     );
 
+assign rf_waddr_3_fwd=dest&{5{rf_we}};
+
 assign stage_3_to_4={rf_we,dest,res_from_mem,pc};
 
 endmodule
\ No newline at end of file
diff --git a/myCPU/mycpu_ID.v b/myCPU/mycpu_ID.v
index 2d2e576..00e90a0 100644
--- a/myCPU/mycpu_ID.v
+++ b/myCPU/mycpu_ID.v
@@ -8,6 +8,10 @@ module stage_2_ID (
     output wire valid_2,
     input  wire allow_3,
 
+    input  wire valid_3,
+    input  wire valid_4,
+    input  wire valid_5,
+
     input  wire [63:0] stage_1_to_2,
     output wire        br_taken,
     output wire [31:0] br_target,
@@ -18,37 +22,36 @@ module stage_2_ID (
     input  wire [31:0] rf_rdata1,
     input  wire [31:0] rf_rdata2,
     output wire [ 4:0] rf_raddr1,
-    output wire [ 4:0] rf_raddr2
+    output wire [ 4:0] rf_raddr2,
 
+    input  wire [ 4:0] rf_waddr_3_fwd,
+    input  wire [ 4:0] rf_waddr_4_fwd,
+    input  wire [ 4:0] rf_waddr_5_fwd
 );
 
-//assign valid_2=1'b1;
+wire readygo_2;
+assign readygo_2=1'b1;
 
-/*reg stage_2_blockflag; // Blocks Signal Flow from IF to ID if decoding a BRANCH-type instruction
-always @(posedge clk ) begin
-    if (reset) stage_2_blockflag <= 1'b0;
-    else if (br_inst) stage_2_blockflag <= ~stage_2_blockflag;
-end
+assign allow_2=~exists_hazard;
 
-assign allow_2 = ~br_inst || (br_inst && stage_2_blockflag); // 当前解码 Branch时，忽略Branch紧接下来的一条指令，在下一拍再由Branch决定。
-*/
+//如果当前指令是分支，那么下一拍invalid
+//阻塞：如果当前出现写后读冲突，那么设置invalid直到冲突消失
 
-assign allow_2=1'b1;
+reg valid_2_r; // 因Branch而导致的invalid
 
-reg next_valid; //如果当前指令是分支，那么下一拍invalid
-assign valid_2=next_valid;
 always @(posedge clk) begin
-    if (reset) next_valid<=1'b1;
-    else if (br_taken && next_valid) next_valid<=1'b0;
-    else if (~next_valid) next_valid<=valid_1;
+    if (reset) valid_2_r<=1'b0;
+    else if (br_taken) valid_2_r<=1'b0;
+    else valid_2_r<=valid_1;
 end
 
+assign valid_2 = valid_2_r && ~exists_hazard;
 
 reg [63:0] upstream_input;
 
 always @(posedge clk ) begin
     if (reset) upstream_input <= 64'b0;
-    if (valid_1 && allow_3)
+    if (valid_1 && allow_3 && ~exists_hazard)
         upstream_input <= stage_1_to_2;
 end
 
@@ -68,6 +71,8 @@ wire        dst_is_r1;
 wire        mem_we;
 wire        mem_en;
 wire        src_reg_is_rd;
+wire        rkd_re;
+wire        rj_re;
 wire [4: 0] dest;
 wire [31:0] rj_value;
 wire [31:0] rkd_value;
@@ -121,10 +126,34 @@ wire        need_si26;
 wire        src2_is_4;
 
 
+wire        rf_re   ; //rf read-enable
 wire        rf_we   ;
 wire [ 4:0] rf_waddr;
 wire [31:0] rf_wdata;
 
+// Address Forwarding 地址前递
+wire fw3_addrValid; // EX阶段的指令需要写寄存器
+wire fw4_addrValid; // AM阶段的指令需要写寄存器
+wire fw5_addrValid; // WB阶段的指令需要写寄存器
+
+wire fw3_raddr1_eq; // EX的 写地址 与 第1个 读地址 相同
+wire fw4_raddr1_eq; // AM的 写地址 与 第1个 读地址 相同
+wire fw5_raddr1_eq; // WB的 写地址 与 第1个 读地址 相同
+
+wire fw3_raddr2_eq; // EX的 写地址 与 第2个 读地址 相同
+wire fw4_raddr2_eq; // AM的 写地址 与 第2个 读地址 相同
+wire fw5_raddr2_eq; // WB的 写地址 与 第2个 读地址 相同
+
+wire fw3_hazard_1;  // 确实存在冲突
+wire fw4_hazard_1;  // 确实存在冲突
+wire fw5_hazard_1;  // 确实存在冲突
+
+wire fw3_hazard_2;  // 确实存在冲突
+wire fw4_hazard_2;  // 确实存在冲突
+wire fw5_hazard_2;  // 确实存在冲突
+
+wire exists_hazard;
+
 wire [31:0] alu_src1   ;
 wire [31:0] alu_src2   ;
 
@@ -233,9 +262,35 @@ assign res_from_mem  = inst_ld_w;
 assign dst_is_r1     = inst_bl;
         // GENERAL PURPOSE REGISTER WRITE-ENABLE
 assign rf_we         = ~inst_st_w & ~inst_beq & ~inst_bne & ~inst_b; //& ~inst_bl; 
+assign rkd_re        = ~src2_is_imm || mem_we;
+assign rj_re         = ~src1_is_pc;
 assign mem_we        = inst_st_w;
-assign mem_en    = (res_from_mem || mem_we);
+assign mem_en        = (res_from_mem || mem_we);
 assign dest          = dst_is_r1 ? 5'd1 : rd;
+assign rf_re         = ~inst_lu12i_w & ~inst_b & ~inst_bl;
+
+// Forwarded Addresses - Control Signals
+assign fw3_addrValid = |rf_waddr_3_fwd; // 若该阶段的rf_we=0，地址输入时直接为0
+assign fw3_raddr1_eq  = (rf_waddr_3_fwd == rf_raddr1);
+assign fw3_raddr2_eq  = (rf_waddr_3_fwd == rf_raddr2);
+assign fw3_hazard_1   = fw3_addrValid && fw3_raddr1_eq && valid_3;
+assign fw3_hazard_2   = fw3_addrValid && fw3_raddr2_eq && valid_3;
+
+assign fw4_addrValid = |rf_waddr_4_fwd; // 若该阶段的rf_we=0，地址输入时直接为0
+assign fw4_raddr1_eq  = (rf_waddr_4_fwd == rf_raddr1);
+assign fw4_raddr2_eq  = (rf_waddr_4_fwd == rf_raddr2);
+assign fw4_hazard_1   = fw4_addrValid && fw4_raddr1_eq && valid_4;
+assign fw4_hazard_2   = fw4_addrValid && fw4_raddr2_eq && valid_4;
+
+assign fw5_addrValid = |rf_waddr_5_fwd; // 若该阶段的rf_we=0，地址输入时直接为0
+assign fw5_raddr1_eq  = (rf_waddr_5_fwd == rf_raddr1);
+assign fw5_raddr2_eq  = (rf_waddr_5_fwd == rf_raddr2);
+assign fw5_hazard_1   = fw5_addrValid && fw5_raddr1_eq && valid_5;
+assign fw5_hazard_2   = fw5_addrValid && fw5_raddr2_eq && valid_5;
+
+assign exists_hazard = (((fw3_hazard_1 || fw4_hazard_1 || fw5_hazard_1) && (rj_re))|| 
+                        ((fw3_hazard_2 || fw4_hazard_2 || fw5_hazard_2) && (rkd_re)))
+                       && rf_re && valid_2_r;
 
 
 // GPR
diff --git a/myCPU/mycpu_IF.v b/myCPU/mycpu_IF.v
index cd1a3ab..ba1c182 100644
--- a/myCPU/mycpu_IF.v
+++ b/myCPU/mycpu_IF.v
@@ -20,6 +20,9 @@ module stage_1_IF(
 
 assign valid_1 = ~reset;
 
+wire readygo_1;
+assign readygo_1=1'b1;
+
 wire [31:0] ds_pc;
 wire [31:0] seq_pc;
 wire [31:0] nextpc;
@@ -36,14 +39,14 @@ always @(posedge clk) begin
         pc <= 32'h1c000000; 
         //pc <= 32'h1bff_fffc;
     end
-    else begin
+    else if(allow_2) begin
         pc <= nextpc;
     end
 end
 
 assign inst_sram_we    = 1'b0;
 assign inst_sram_en    = 1'b1;
-assign inst_sram_addr  = nextpc; //pc; changed for pipeline
+assign inst_sram_addr  = nextpc & {32{allow_2}} | pc & {32{~allow_2}}; //keep pc and instruction synced
 assign inst_sram_wdata = 32'b0;
 assign inst            = inst_sram_rdata;
 
diff --git a/myCPU/mycpu_WB.v b/myCPU/mycpu_WB.v
index bc37772..dfdfa0b 100644
--- a/myCPU/mycpu_WB.v
+++ b/myCPU/mycpu_WB.v
@@ -5,6 +5,7 @@ module stage_5_WB (
     // valid / allow
     input  wire valid_4,
     output wire allow_5,
+    output  reg valid_5,
 
     input  wire [69:0] stage_4_to_5,
 
@@ -14,10 +15,12 @@ module stage_5_WB (
     output wire [31:0] debug_wb_pc
 );
 
-reg valid_4_reg;
+wire readygo_5;
+assign readygo_5=1'b1;
+
 always @(posedge clk ) begin
-    if (reset) valid_4_reg<=1'b1;
-    else valid_4_reg<=valid_4;
+    if (reset) valid_5<=1'b0;
+    else valid_5<=valid_4;
 end
 
 assign allow_5=1'b1;
@@ -38,9 +41,9 @@ end
 
 wire rf_we_internal;
 assign {rf_we_internal,dest,final_result,pc}=upstream_input;
-assign rf_we=rf_we_internal&valid_4_reg;
+assign rf_we=rf_we_internal&valid_5;
 
-assign rf_waddr=dest;
+assign rf_waddr=dest&{5{rf_we}};
 assign rf_wdata=final_result;
 
 endmodule
\ No newline at end of file
diff --git a/myCPU/mycpu_top.v b/myCPU/mycpu_top.v
index 7e1de83..02dde82 100644
--- a/myCPU/mycpu_top.v
+++ b/myCPU/mycpu_top.v
@@ -27,7 +27,7 @@ wire valid_1; // the valid signal given by stage 1
 wire valid_2; // beq bne b 执行到此为止
 wire valid_3; 
 wire valid_4;
-//wire valid_5;
+wire valid_5;
 
 //wire allow_1;
 wire allow_2; // branch 类 指令需要阻塞
@@ -65,6 +65,9 @@ wire [31:0] rf_rdata2;
 wire [ 4:0] rf_raddr1;
 wire [ 4:0] rf_raddr2;
 
+wire [ 4:0] rf_waddr_3_fwd;
+wire [ 4:0] rf_waddr_4_fwd;
+
 wire [116:0] stage_2_to_3;
 wire [31:0]  memory_write_data;
 stage_2_ID instantiation_ID  (
@@ -74,6 +77,9 @@ stage_2_ID instantiation_ID  (
     .valid_2 (valid_2),
     .allow_2 (allow_2),
     .allow_3 (allow_3),
+    .valid_3 (valid_3),
+    .valid_4 (valid_4),
+    .valid_5 (valid_5),
     .stage_1_to_2 (stage_1_to_2),
     .br_taken (br_taken),
     .br_target (br_target),
@@ -82,7 +88,10 @@ stage_2_ID instantiation_ID  (
     .rf_raddr1 (rf_raddr1),
     .rf_raddr2 (rf_raddr2),
     .rf_rdata1 (rf_rdata1),
-    .rf_rdata2 (rf_rdata2)
+    .rf_rdata2 (rf_rdata2),
+    .rf_waddr_3_fwd (rf_waddr_3_fwd),
+    .rf_waddr_4_fwd (rf_waddr_4_fwd),
+    .rf_waddr_5_fwd (rf_waddr)
 );
 
 wire [38:0] stage_3_to_4;
@@ -101,7 +110,8 @@ wire [31:0] alu_result;
     .data_sram_wdata (data_sram_wdata),
     .data_sram_we (data_sram_we),
     .data_sram_en (data_sram_en),
-    .stage_3_to_4 (stage_3_to_4)
+    .stage_3_to_4 (stage_3_to_4),
+    .rf_waddr_3_fwd (rf_waddr_3_fwd)
 );
 
 assign data_sram_addr=alu_result;
@@ -117,7 +127,8 @@ wire [69:0] stage_4_to_5;
     .stage_3_to_4 (stage_3_to_4),
     .alu_result (alu_result),
     .data_sram_rdata (data_sram_rdata),
-    .stage_4_to_5 (stage_4_to_5)
+    .stage_4_to_5 (stage_4_to_5),
+    .rf_waddr_4_fwd (rf_waddr_4_fwd)
 );
 
  stage_5_WB instantiation_WB(
@@ -125,6 +136,7 @@ wire [69:0] stage_4_to_5;
     .reset (reset),
     .valid_4 (valid_4),
     .allow_5 (allow_5),
+    .valid_5 (valid_5),
     .stage_4_to_5 (stage_4_to_5),
     .rf_we (rf_we),
     .rf_waddr (rf_waddr),
-- 
2.35.1.windows.1

